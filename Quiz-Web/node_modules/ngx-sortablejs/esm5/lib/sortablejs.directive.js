/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, ElementRef, EventEmitter, Inject, Input, NgZone, Optional, Output, Renderer2 } from '@angular/core';
import Sortable from 'sortablejs';
import { GLOBALS } from './globals';
import { SortablejsBindings } from './sortablejs-bindings';
import { SortablejsService } from './sortablejs.service';
var SortablejsDirective = /** @class */ (function () {
    function SortablejsDirective(globalConfig, service, element, zone, renderer) {
        this.globalConfig = globalConfig;
        this.service = service;
        this.element = element;
        this.zone = zone;
        this.renderer = renderer;
        this.runInsideAngular = false; // to be deprecated
        // to be deprecated
        this.sortablejsInit = new EventEmitter();
    }
    /**
     * @return {?}
     */
    SortablejsDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (Sortable && Sortable.create) { // Sortable does not exist in angular universal (SSR)
            if (this.runInsideAngular) {
                this.create();
            }
            else {
                this.zone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return _this.create(); }));
            }
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SortablejsDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var optionsChange = changes.sortablejsOptions;
        if (optionsChange && !optionsChange.isFirstChange()) {
            /** @type {?} */
            var previousOptions_1 = optionsChange.previousValue;
            /** @type {?} */
            var currentOptions_1 = optionsChange.currentValue;
            Object.keys(currentOptions_1).forEach((/**
             * @param {?} optionName
             * @return {?}
             */
            function (optionName) {
                if (currentOptions_1[optionName] !== previousOptions_1[optionName]) {
                    // use low-level option setter
                    _this.sortableInstance.option(optionName, _this.options[optionName]);
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    SortablejsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.sortableInstance) {
            this.sortableInstance.destroy();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SortablejsDirective.prototype.create = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var container = this.sortablejsContainer ? this.element.nativeElement.querySelector(this.sortablejsContainer) : this.element.nativeElement;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.sortableInstance = Sortable.create(container, _this.options);
            _this.sortablejsInit.emit(_this.sortableInstance);
        }), 0);
    };
    /**
     * @private
     * @return {?}
     */
    SortablejsDirective.prototype.getBindings = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.sortablejs) {
            return new SortablejsBindings([]);
        }
        else if (this.sortablejs instanceof SortablejsBindings) {
            return this.sortablejs;
        }
        else {
            return new SortablejsBindings([this.sortablejs]);
        }
    };
    Object.defineProperty(SortablejsDirective.prototype, "options", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return tslib_1.__assign({}, this.optionsWithoutEvents, this.overridenOptions);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SortablejsDirective.prototype, "optionsWithoutEvents", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return tslib_1.__assign({}, (this.globalConfig || {}), (this.sortablejsOptions || {}));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} eventName
     * @param {...?} params
     * @return {?}
     */
    SortablejsDirective.prototype.proxyEvent = /**
     * @private
     * @param {?} eventName
     * @param {...?} params
     * @return {?}
     */
    function (eventName) {
        var _this = this;
        var params = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            params[_i - 1] = arguments[_i];
        }
        this.zone.run((/**
         * @return {?}
         */
        function () {
            var _a;
            if (_this.optionsWithoutEvents && _this.optionsWithoutEvents[eventName]) {
                (_a = _this.optionsWithoutEvents)[eventName].apply(_a, tslib_1.__spread(params));
            }
        }));
    };
    Object.defineProperty(SortablejsDirective.prototype, "isCloning", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.sortableInstance.options.group.checkPull(this.sortableInstance, this.sortableInstance) === 'clone';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @template T
     * @param {?} item
     * @return {?}
     */
    SortablejsDirective.prototype.clone = /**
     * @private
     * @template T
     * @param {?} item
     * @return {?}
     */
    function (item) {
        // by default pass the item through, no cloning performed
        return (this.sortablejsCloneFunction || ((/**
         * @param {?} subitem
         * @return {?}
         */
        function (subitem) { return subitem; })))(item);
    };
    Object.defineProperty(SortablejsDirective.prototype, "overridenOptions", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            // always intercept standard events but act only in case items are set (bindingEnabled)
            // allows to forget about tracking this.items changes
            return {
                onAdd: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    _this.service.transfer = (/**
                     * @param {?} items
                     * @return {?}
                     */
                    function (items) {
                        _this.getBindings().injectIntoEvery(event.newIndex, items);
                        _this.proxyEvent('onAdd', event);
                    });
                    _this.proxyEvent('onAddOriginal', event);
                }),
                onRemove: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    /** @type {?} */
                    var bindings = _this.getBindings();
                    if (bindings.provided) {
                        if (_this.isCloning) {
                            _this.service.transfer(bindings.getFromEvery(event.oldIndex).map((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) { return _this.clone(item); })));
                            // great thanks to https://github.com/tauu
                            // event.item is the original item from the source list which is moved to the target list
                            // event.clone is a clone of the original item and will be added to source list
                            // If bindings are provided, adding the item dom element to the target list causes artifacts
                            // as it interferes with the rendering performed by the angular template.
                            // Therefore we remove it immediately and also move the original item back to the source list.
                            // (event handler may be attached to the original item and not its clone, therefore keeping
                            // the original dom node, circumvents side effects )
                            _this.renderer.removeChild(event.item.parentNode, event.item);
                            _this.renderer.insertBefore(event.clone.parentNode, event.item, event.clone);
                            _this.renderer.removeChild(event.clone.parentNode, event.clone);
                        }
                        else {
                            _this.service.transfer(bindings.extractFromEvery(event.oldIndex));
                        }
                        _this.service.transfer = null;
                    }
                    _this.proxyEvent('onRemove', event);
                }),
                onUpdate: (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    /** @type {?} */
                    var bindings = _this.getBindings();
                    bindings.injectIntoEvery(event.newIndex, bindings.extractFromEvery(event.oldIndex));
                    _this.proxyEvent('onUpdate', event);
                }),
            };
        },
        enumerable: true,
        configurable: true
    });
    SortablejsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[sortablejs]',
                },] }
    ];
    /** @nocollapse */
    SortablejsDirective.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [GLOBALS,] }] },
        { type: SortablejsService },
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    SortablejsDirective.propDecorators = {
        sortablejs: [{ type: Input }],
        sortablejsContainer: [{ type: Input }],
        sortablejsOptions: [{ type: Input }],
        sortablejsCloneFunction: [{ type: Input }],
        runInsideAngular: [{ type: Input }],
        sortablejsInit: [{ type: Output }]
    };
    return SortablejsDirective;
}());
export { SortablejsDirective };
if (false) {
    /** @type {?} */
    SortablejsDirective.prototype.sortablejs;
    /** @type {?} */
    SortablejsDirective.prototype.sortablejsContainer;
    /** @type {?} */
    SortablejsDirective.prototype.sortablejsOptions;
    /** @type {?} */
    SortablejsDirective.prototype.sortablejsCloneFunction;
    /**
     * @type {?}
     * @private
     */
    SortablejsDirective.prototype.sortableInstance;
    /** @type {?} */
    SortablejsDirective.prototype.runInsideAngular;
    /** @type {?} */
    SortablejsDirective.prototype.sortablejsInit;
    /**
     * @type {?}
     * @private
     */
    SortablejsDirective.prototype.globalConfig;
    /**
     * @type {?}
     * @private
     */
    SortablejsDirective.prototype.service;
    /**
     * @type {?}
     * @private
     */
    SortablejsDirective.prototype.element;
    /**
     * @type {?}
     * @private
     */
    SortablejsDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    SortablejsDirective.prototype.renderer;
}
/**
 * @record
 */
function SortableEvent() { }
if (false) {
    /** @type {?} */
    SortableEvent.prototype.oldIndex;
    /** @type {?} */
    SortableEvent.prototype.newIndex;
    /** @type {?} */
    SortableEvent.prototype.item;
    /** @type {?} */
    SortableEvent.prototype.clone;
}
//# sourceMappingURL=data:application/json;base64,